#! /usr/bin/env python3import psutil  # 获取系统 IPimport warnings  # 关闭数据库的警告import matplotlib.pyplot as plt  # 绘图# import pandas as pdfrom scapy.all import *  # 抓包软件from db import *sniffInterval = 0.5  # 两次抓包的间隔# 报文段 类class Segment(object):    def __init__(self, protocol, sMAC, dMAC, sIP, dIP, length):        # self.count = count        self.protocol = protocol        self.sMAC = sMAC        self.dMAC = dMAC        self.sIP = sIP        self.dIP = dIP        self.length = length    def print(self):        __text = {'报文段协议': self.protocol,                  '发送者 MAC': self.sMAC,                  '接收者 MAC': self.dMAC,                  '发送者 IP': self.sIP,                  '接收者 IP': self.dIP,                  '包长度 (Byte)': self.length}        for key, value in __text:            print(key, '\t', value, '\n')    def to_database_string(self):        return "(now(), '%s', '%s', '%s', '%s', '%s', '%s')" % (        self.protocol, self.sMAC, self.dMAC, self.sIP, self.dIP, self.length)# 直接输出原始包，供调试用def print_packet(_packet):    print(_packet.show())# 获取所有网卡信息def get_network_info():    network_info = []    info = psutil.net_if_addrs()    for k, v in info.items():        for item in v:            if item[0] == 2 and not item[1] == '127.0.0.1':  # 不包括本地回环的话                network_info.append([k, item[1]])                # network_info.append([k, item[1], item[2]])    return network_info# 让用户选择监听的网卡def get_interface_no_gui():    network_info = get_network_info()    print(network_info)    network_name = [i[0] for i in network_info]    user_iface = input('请输入需要监听的网卡名：')    while user_iface not in ifacesList:        print('输入错误\n')        user_iface = input('请输入需要监听的网卡名：')    return user_iface# 初始化数据库def init_database(userIP):    warnings.simplefilter("ignore")    # 建立一个基表和六个视图，基表用于存数据，视图供查询用    sql = '''        CREATE DATABASE IF NOT EXISTS network_monitor;         DROP TABLE IF EXISTS network_monitor.information;        CREATE TABLE network_monitor.information (            packet_time     VARCHAR(30),            packet_protocol VARCHAR(10),            source_MAC      VARCHAR(17),            destination_MAC VARCHAR(17),            source_IP       VARCHAR(15),            destination_IP  VARCHAR(15),            packet_length   INT         DEFAULT 0);        CREATE OR REPLACE VIEW network_monitor.IP_upload            AS (SELECT destination_IP as IP, sum(packet_length) AS length, count(packet_length) AS packet                  FROM network_monitor.information                 WHERE source_IP = '{0}'                 GROUP BY destination_IP);        CREATE OR REPLACE VIEW network_monitor.IP_download            AS (SELECT source_IP as IP, sum(packet_length) AS length, count(packet_length) AS packet                  FROM network_monitor.information                 WHERE destination_IP = '{0}'                 GROUP BY source_IP);        CREATE OR REPLACE VIEW network_monitor.protocol_upload            AS (SELECT packet_protocol as protocol, sum(packet_length) AS length, count(packet_length) AS packet                  FROM network_monitor.information                 WHERE source_IP = '{0}'                 GROUP BY packet_protocol);        CREATE OR REPLACE VIEW network_monitor.protocol_download            AS (SELECT packet_protocol as protocol, sum(packet_length) AS length, count(packet_length) AS packet                  FROM network_monitor.information                 WHERE destination_IP = '{0}'                 GROUP BY packet_protocol);        CREATE OR REPLACE VIEW network_monitor.IP_upload_download            AS SELECT up.IP                               AS IP,                      up.packet                           AS upload_packet,                      COALESCE(down.packet,0)             AS download_packet,                      up.length                           AS upload_length,                      COALESCE(down.length,0)             AS download_length,                      up.packet + COALESCE(down.packet,0) AS all_packet,                      up.length + COALESCE(down.length,0) AS all_length                 FROM network_monitor.IP_upload AS up                 LEFT JOIN network_monitor.IP_download AS down                   ON up.IP = down.IP                UNION ALL               SELECT down.IP                             AS IP,                      COALESCE(up.packet,0)               AS upload_packet,                      down.packet                         AS download_packet,                      COALESCE(up.length,0)               AS upload_length,                      down.length                         AS download_length,                      COALESCE(up.packet,0) + down.packet AS all_packet,                      COALESCE(up.length,0) + down.length AS all_length                 FROM network_monitor.IP_upload AS up                RIGHT JOIN network_monitor.IP_download AS down                   ON up.IP = down.IP                WHERE up.IP IS NULL;        CREATE OR REPLACE VIEW network_monitor.protocol_upload_download            AS SELECT up.protocol                         AS protocol,                      up.packet                           AS upload_packet,                      COALESCE(down.packet,0)             AS download_packet,                      up.length                           AS upload_length,                      COALESCE(down.length,0)             AS download_length,                      up.packet + COALESCE(down.packet,0) AS all_packet,                      up.length + COALESCE(down.length,0) AS all_length                 FROM network_monitor.protocol_upload AS up                 LEFT JOIN network_monitor.protocol_download AS down                   ON up.protocol = down.protocol                UNION ALL               SELECT down.protocol                       AS protocol,                      COALESCE(up.packet,0)               AS upload_packet,                      down.packet                         AS download_packet,                      COALESCE(up.length,0)               AS upload_length,                      down.length                         AS download_length,                      COALESCE(up.packet,0) + down.packet AS all_packet,                      COALESCE(up.length,0) + down.length AS all_length                 FROM network_monitor.protocol_upload AS up                RIGHT JOIN network_monitor.protocol_download AS down                   ON up.protocol = down.protocol                WHERE up.protocol IS NULL;    '''    sql = sql.format(userIP)    sql = sql.replace('\n\n', '#').split('#')    # 由于 pymysql 一次只能执行一条命令，需要将上面的代码按 \n\n 分割。    # 上面的 sql 的两个空行之间不能有空格，不然不能正确识别 \n\n，报错！    for s in sql:        run_sql(s)# 向数据库插入 list 中所有包的信息def insert_database(segments):    if not segments:        return    # MySQL 支持一次插入多行数据，格式为    # INSERT INTO tbl_name (a,b,c) VALUES(1,2,3),(4,5,6),(7,8,9);    segments_string_list = (x.to_database_string() for x in segments)    segments_str = ','.join(segments_string_list)    sql = '''        INSERT INTO network_monitor.information        VALUES %s;        ''' % segments_str    run_sql(sql)# 查询数据库数据并画图def plot_flow_graph(plotCategory, plotUnit, plotNum):    if plotCategory not in ['protocol', 'IP'] or plotUnit not in ['packet', 'length']:        raise RuntimeError('plot string not right in plotting')    sql = '''    SELECT {0}, upload_{1} AS upload, download_{1} AS download      FROM network_monitor.{0}_upload_download     ORDER BY all_{1} DESC    LIMIT {2};'''    sql = sql.format(plotCategory, plotUnit, plotNum)    values = run_sql_with_result(sql)    name_list = [x[plotCategory] for x in values]    upload = [x['upload'] for x in values]    download = [x['download'] for x in values]    x = list(range(len(upload), 0, -1))  # 查询结果从高到低，需要反向输出，变成上长下短的柱状图    total_width, n = 0.8, 2    width = total_width / n    # 使用 matplotlib 绘制柱状图    plt.barh(x, upload, height=width, label='upload', fc='limegreen')    for i in range(len(x)):        x[i] = x[i] + width    plt.barh(x, download, height=width, label='download', tick_label=name_list, fc='slateblue')    plt.legend()    plt.pause(0.01)    plt.clf()    # 使用 pandas 绘图    # plt.figure()    # ax = plt.axes()    # data = [[upload[i], download[i]] for i in range(len(upload))]    # df = pd.DataFrame(data, index=name_list)    # df.plot(ax=ax, kind='barh', rot=1, color=['limegreen', 'slateblue'])    # plt.pause(0.1)    # ax.clf()# 每个线程抓包 sniffTime 秒后进行处理数据def sniff_packet(userIface, sniffTime):    # 每个线程抓包 sniffTime 秒    packets = sniff(iface=userIface, timeout=sniffTime)    return data_process(packets)# 处理数据def data_process(packets):    segments = []    lengthCount = 0    # 对每一个包进行处理数据    for _packet in packets:        # 下面对包进行处理，并获得包的信息        if Ether in _packet:            sMAC = _packet[Ether].src            dMAC = _packet[Ether].dst        else:            sMAC = 'unknown'            dMAC = 'unknown'        if IP in _packet:            sIP = _packet[IP].src            dIP = _packet[IP].dst            length = _packet[IP].len            def get_ip_proto(packet):                protocol_field = packet.get_field('proto')                return protocol_field.i2s[packet.proto]            try:                protocol = get_ip_proto(_packet[IP]).upper()  # 传输层协议的名字            except:                protocol = 'Others'  # 在 Windows 上会莫名报错，可能是 Windows 原生不支持的协议        elif ARP in _packet:            sIP = _packet[ARP].psrc            dIP = _packet[ARP].pdst            length = 28  # ARP 报文固定 28 Bytes            protocol = 'ARP'        else:  # 不是 IP/ARP            protocol = 'Others'            length = 0            sIP = 'unknown'            dIP = 'unknown'        lengthCount += length        segments.append(Segment(protocol, sMAC, dMAC, sIP, dIP, length))    insert_database(segments)    return lengthCount# 这样以后，该文件可以被 import 而不会被执行if __name__ == '__main__':    iface, userIp = choose_iface()    # iface, userIP = 'enp34s0', '192.168.0.10'    init_database(userIP)    plt.ion() # 开启交互式绘图    for i in range(int(10 / sniffInterval)):  # 如果 while true 则没法退出，建议用 sudo killall python3        sniff_packet(iface, sniffInterval)        plot_flow_graph('IP', 'length', 5)